#lang pie

(the (Pair Atom Atom) (cons 'ratatouille 'baguette))

(car (the (Pair Atom Atom) (cons 'ratatouille 'baguette)))

(cdr (the (Pair Atom Atom) (cons 'ratatouille 'baguette)))

(Pair
  (car
    (the (Pair U Atom) (cons Atom 'olive)))
  (cdr
    (the (Pair Atom U) (cons 'oil Atom))))

(the Nat 0)
(the Nat (add1 0))

(claim one Nat)
(define one (add1 zero))

(claim step-+ (-> Nat Nat))
(define step-+
  (lambda (n) (add1 n)))

(claim + (-> Nat (-> Nat Nat)))
(define +
  (λ (n j) (iter-Nat n j step-+)))

(claim gauss (-> Nat Nat))
(define gauss
  (lambda (x)
    (+ (rec-Nat x 0 +) x)))

(claim step-* (-> Nat Nat Nat))
(define step-*
  (lambda (j next)
    (+ j next)))

(claim * (-> Nat Nat Nat))
(define *
  (lambda (n j)
    (iter-Nat n 0 (step-* j))))

'ChapterFour

(claim flip
  (Pi ((A U) (B U)) (-> (Pair A B) (Pair B A))))
(define flip
  (lambda (A B)
    (lambda (p)
      (cons (cdr p) (car p)))))

(claim elim-Pair
  (Pi
    ((A U) (B U) (X U))
    (-> (Pair A B) (-> A B X) X)))
(define elim-Pair
  (lambda (A B X)
    (lambda (p f)
      (f (car p) (cdr p)))))

'ChapterFive

(claim step-length (Pi ((E U)) (-> E (List E) Nat Nat)))
(define step-length
  (lambda (E)
    (lambda (e es rest)
      (add1 rest))))


(claim length
  (Pi ((E U)) (-> (List E) Nat)))
(define length
  (lambda (E)
    (lambda (es)
      (rec-List es 0 (step-length E)))))

(claim step-append (Pi ((E U)) (-> E (List E) (List E) (List E))))
(define step-append
  (lambda (E)
    (lambda (e es rest)
      (:: e rest))))

(claim append
  (Pi ((E U))
    (-> (List E) (List E) (List E))))
(define append
  (lambda (E)
    (lambda (as bs)
      (rec-List as bs (step-append E)))))
      
(claim snoc
  (Pi ((E U))
    (-> (List E) E (List E))))
(define snoc
  (lambda (E)
    (lambda (es e)
      (append E es (:: e nil)))))

'ChapterSix

(claim first
  (Pi
    ((E U) (l Nat) (es (Vec E (add1 l))))
    E))
(define first
  (lambda (E l)
    (lambda (es) (head es))))

(claim rest
  (Pi
    ((E U) (l Nat) (es (Vec E (add1 l))))
    (Vec E l)))
(define rest
  (lambda (E l)
    (lambda (es)
      (tail es))))

'ChapterSeven

(claim mot-replicate (Pi ((E U)) (-> Nat U)))
(define mot-replicate
  (lambda (E)
    (lambda (l)
      (Vec E l))))

(claim replicate
  (Pi ((E U) (l Nat)) (-> E (Vec E l))))
(define replicate
  (lambda (E)
    (lambda (l e)
      (ind-Nat
        l
        (mot-replicate E)
        vecnil
        (lambda (n)
          (lambda (acc)
            (vec:: e acc))))))) 

(claim mot-last (-> U Nat U))
(define mot-last
  (lambda (E k)
    (-> (Vec E (add1 k)) E)))

(claim base-last (Pi ((E U)) (-> (Vec E (add1 0)) E)))
(define base-last
  (lambda (E)
    (lambda (es)
      (head es))))

(claim step-last
  (Pi
    ((E U) (l Nat))
    (-> (mot-last E l) (mot-last E (add1 l)))))
(define step-last
  (lambda (E l)
    (lambda (acc)
      (lambda (es)
        (acc (tail es))))))

(claim last
  (Pi
    ((E U) (l Nat) (es (Vec E (add1 l))))
    E))
(define last
  (lambda (E)
    (lambda (l)
      (ind-Nat l
        (mot-last E)
        (base-last E)
        (step-last E)))))

'ChapterEight

(= Nat 17 (+ 14 3))

(claim add0 (Pi ((n Nat)) (= Nat (+ 0 n) n)))
(define add0
  (lambda (n) (same n)))
 
(claim plus-1-is-add1
  (Pi ((n Nat)) (= Nat (+ 1 n) (add1 n))))
(define plus-1-is-add1
  (lambda (n) (same (add1 n))))

'ChapterNine

'ChapterTen

(claim sigma-prac (Sigma ((n Nat)) (= Nat n 20)))
(define sigma-prac
  (cons (+ 10 10) (same 20)))

(claim example (Sigma ((n Nat)) (Vec Atom n)))
(define example (cons 5 (vec:: 'hello (vec:: 'hello (vec:: 'hello (vec:: 'hello (vec:: 'hello vecnil)))))))

(claim base-list->vec (Pi ((E U)) (Sigma ((l Nat)) (Vec E l))))
(define base-list->vec
  (lambda (E)
    (cons 0 vecnil)))

(claim list->vec
  (Pi ((E U))
    (-> (List E)
        (Sigma ((l Nat))
          (Vec E l)))))
(define list->vec
  (lambda (E es)
    (rec-List es
      (base-list->vec E)
      (lambda (e es acc)
        (cons (add1 (car acc)) (vec:: e (cdr acc)))))))

(claim mot-vec-replicate (-> U Nat U))
(define mot-vec-replicate
  (lambda (E k)
    (Vec E k)))

(claim step-vec-replicate
  (Π ((E U)
      (e E)
      (n-1 Nat))
    (→ (Vec E n-1)
      (Vec E (add1 n-1)))))
(define step-vec-replicate
  (lambda (E e l)
   (lambda (rest)
     (vec:: e rest))))

(claim vec-replicate
  (Pi ((E U)
       (l Nat))
    (-> E
        (Vec E l))))
(define vec-replicate
  (lambda (E l e)
    (ind-Nat l
      (mot-vec-replicate E)
      vecnil
      (step-vec-replicate E e))))

(claim mot-list->vec (Pi ((E U)) (-> (List E) U)))
(define mot-list->vec
  (lambda (E es)
    (Vec E (length E es))))

(claim step-list->vec
  (Pi ((E U)
       (e E)
       (es (List E)))
    (-> (mot-list->vec E es)
        (mot-list->vec E (:: e es)))))
(define step-list->vec
  (lambda (E e es)
    (lambda (vec)
      (vec:: e vec))))

(claim list->vec2
  (Pi ((E U)
       (es (List E)))
     (Vec E (length E es))))
(define list->vec2
  (lambda (E es)
    (ind-List es
      (mot-list->vec E)
      vecnil
      (step-list->vec E))))

'ChapterEleven

(claim mot-vec-append
  (Pi ((E U)
       (j Nat)
       (k Nat))
    (-> (Vec E k) U)))
(define mot-vec-append
  (lambda (E k j es)
    (Vec E (+ j k))))

(claim step-vec-append
  (Pi ((E U)
       (j Nat)
       (k Nat)
       (e E)
       (es (Vec E k)))
    (-> (mot-vec-append E j k es)
        (mot-vec-append E j (add1 k) (vec:: e es)))))
(define step-vec-append
  (lambda (E j k e es)
    (lambda (vec)
      (vec:: e vec))))

(claim vec-append
  (Pi ((E U)
       (l Nat)
       (j Nat))
    (-> (Vec E l) (Vec E j)
        (Vec E (+ l j)))))
(define vec-append
  (lambda (E l j)
    (lambda (xs ys)
      (ind-Vec l xs
        (mot-vec-append E j)
        ys
        (step-vec-append E j)))))
       
'ChapterTwelve

(claim double (-> Nat Nat))
(define double
  (lambda (n)
    (iter-Nat n 0 (lambda (x) (add1 (add1 x))))))

(claim Even (-> Nat U))
(define Even
  (lambda (n)
    (Sigma ((half Nat))
      (= Nat n (double half)))))

(claim +two-even
  (Pi ((n Nat))
    (-> (Even n)
        (Even (+ 2 n)))))
(define +two-even
  (lambda (n even)
      (cons
        (add1 (car even))
        (cong (cdr even) (+ 2)))))

(claim Odd (-> Nat U))
(define Odd
  (lambda (n)
    (Sigma ((half Nat))
      (= Nat n (add1 (double half))))))

(claim one-is-odd (Odd 1))
(define one-is-odd (cons 0 (same 1)))

(claim add1-even->odd
  (Pi ((n Nat))
    (-> (Even n)
        (Odd (add1 n)))))
(define add1-even->odd
  (lambda (n even)
    (cons (car even) (cong (cdr even) (+ 1)))))

(claim add1-odd->even
  (Pi ((n Nat))
    (-> (Odd n)
        (Even (add1 n)))))
(define add1-odd->even
  (lambda (n odd)
    (cons (add1 (car odd)) (cong (cdr odd) (+ 1)))))

'ChapterThirteen

(claim mot-even-or-odd (-> Nat U))
(define mot-even-or-odd (lambda (n) (Either (Even n) (Odd n))))

(claim even-zero (Even 0))
(define even-zero (cons 0 (same 0)))


(claim step-even-or-odd
  (Pi ((n Nat))
    (-> (mot-even-or-odd n)
        (mot-even-or-odd (add1 n)))))
(define step-even-or-odd
  (lambda (n eOrO)
    (ind-Either eOrO
      (lambda (eOrO) (mot-even-or-odd (add1 n)))
      (lambda (even)
        (right (add1-even->odd n even)))
      (lambda (odd)
        (left (add1-odd->even n odd))))))
      
(claim even-or-odd
  (Pi ((n Nat))
    (Either (Even n) (Odd n))))
(define even-or-odd
  (lambda (n)
    (ind-Nat
      n
      mot-even-or-odd
      (left even-zero)
      step-even-or-odd)))

'ChapterFourteen

(claim Maybe (-> U U))
(define Maybe
  (lambda (X)
    (Either X Trivial)))

(claim nothing
  (Pi ((E U))
    (Maybe E)))
(define nothing
  (lambda (E)
    (right sole)))

(claim just
  (Pi ((E U))
    (-> E (Maybe E))))
(define just
  (lambda (E e)
    (left e)))

(claim maybe-head
  (Pi ((E U))
    (-> (List E)
        (Maybe E))))
(define maybe-head
  (lambda (E es)
    (rec-List es
      (nothing E)
      (lambda (hd tl t)
        (just (List E) tl)))))
